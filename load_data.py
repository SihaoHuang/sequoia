class CourseData:

    def __init__(self, filename):

        import json
        from pprint import pprint

        with open(filename, encoding="utf8") as f:
            self.data = json.load(f)["items"] 
            # data is a list of dictionaries, each corresponding to a course


    def get_course_count(self):
        """Returns: int, total number of courses"""

        course_count = 0
        for entry in self.data:
            if entry["type"] == "Class":
                course_count += 1
        return course_count

    def get_full_list(self):
        """Returns: list, copy of full list generated by json file"""

        return self.data.copy()

    def get_course_list(self, department="all"):
        """Default: returns all courses. Input: Specify course name in string.
        Returns: list, list of all classes available (id)"""

        ans = []
        if department == "all":
            for entry in self.data:
                if entry["type"] == "Class":
                    ans.append(entry["id"])
        else:
            for entry in self.data:
                if entry["type"] == "Class" and entry["course"] == department:
                    ans.append(entry["id"])
        return ans

    def create_course_dict(self, department="all"):
        """Default: returns all courses. Input: Specify course name in string.
        Returns: dictionary of dictionaries, the first dictionary is keyed by a string
        of the class id, the second has the following keys.
        'type': with possibilities 'Class', 'RecitationSession', 'LectureSession', 'LabSession'
        'label': course title
        'level':
        'description'
        'prereqs'
        'equivalent_subjects'
        'joint_subjects'
        'hass_attribute'
        'gir_attribute'
        'total_units'
        'course'
        """
        course_dict = {}

        if department == "all":
            for entry in self.data:
                if entry["type"] == "Class":
                    
                    entry_dict = {}

                    entry_dict["label"] = entry["label"] 
                    # entry_dict["level"] = entry["level"]
                    # entry_dict["description"] = entry["description"]
                    entry_dict["prereqs"] = entry["prereqs"]
                    # entry_dict["equivalent_subjects"] = entry["equivalent_subjects"]
                    # entry_dict["joint_subjects"] = entry["joint_subjects"]
                    # entry_dict["hass_attribute"] = entry["hass_attribute"]
                    # entry_dict["gir_attribute"] = entry["gir_attribute"]
                    # entry_dict["total_units"] = entry["total_units"]
                    # entry_dict["course"] = entry["course"]

                    course_dict[entry["id"]] = entry_dict
        else:
            for entry in self.data:
                if entry["type"] == "Class" and entry["course"] == department:
                    
                    entry_dict = {}

                    entry_dict["label"] = entry["label"] 
                    # entry_dict["level"] = entry["level"]
                    # entry_dict["description"] = entry["description"]
                    entry_dict["prereqs"] = entry["prereqs"]
                    # entry_dict["equivalent_subjects"] = entry["equivalent_subjects"]
                    # entry_dict["joint_subjects"] = entry["joint_subjects"]
                    # entry_dict["hass_attribute"] = entry["hass_attribute"]
                    # entry_dict["gir_attribute"] = entry["gir_attribute"]
                    # entry_dict["total_units"] = entry["total_units"]
                    # entry_dict["course"] = entry["course"]

                    course_dict[entry["id"]] = entry_dict
                
        return course_dict

    def print_courses(self):
        """Prints list of courses, as well as their descriptions, procedurally.
        Returns: None"""

        import time

        course_count = 0
        for entry in self.data:
            if entry["type"] == "Class":
                print(entry["id"] + ": " + entry["label"])
                time.sleep(0.001)

        print("Length: " + str(self.get_course_count()))

    def create_prereq_list(self, prereq_string):
        """Helper function to parse prereqs, returns list of prereqs regardless of or/and.
        Input: string of the prereq data entry
        Output: list of prereqs"""

        prereq_list = []

        for each in self.get_course_list():
            if each in prereq_string:
                prereq_list.append(each)
        
        # if "instructor" in prereq_string:
        #     prereq_list.append("Permission of instructor")
        if "GIR:CHEM" in prereq_string:
            prereq_list.append("3.091")
            prereq_list.append("5.111")
            prereq_list.append("5.112")
        if "GIR:PHYS1" in prereq_string:
            prereq_list.append("8.01")
            prereq_list.append("8.011")
            prereq_list.append("8.012")
            prereq_list.append("8.01L")
        if "GIR:PHYS2" in prereq_string:
            prereq_list.append("8.02")
            prereq_list.append("8.021")
            prereq_list.append("8.022")
        if "GIR:CAL1" in prereq_string:
            prereq_list.append("18.01")
            prereq_list.append("18.01A")
        if "GIR:CAL2" in prereq_string:
            prereq_list.append("18.02")
            prereq_list.append("18.02A")
            prereq_list.append("18.022")
        if "GIR:BIOL" in prereq_string:
            prereq_list.append("7.012")
            prereq_list.append("7.013")
            prereq_list.append("7.014")
            prereq_list.append("7.015")
            prereq_list.append("7.016")

        return prereq_list
            
# data = CourseData("course_data.json")
# data_dict = data.create_course_dict()
# for each in data_dict.values():
#     print(data.create_prereq_list(each["prereqs"]))
#     #print(each["prereqs"])
    
